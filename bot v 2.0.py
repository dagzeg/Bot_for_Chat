import datetime as dt  # –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–Ω–µ–π –¥–æ –æ–ø–µ—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–∞—Ç—ã
import re  # –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
import calendar
import time

import numpy as np  # –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
import telebot  # –Ω–∞ —á–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∞–º –±–æ—Ç
import logging  # –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å –ª–æ–≥–∏
import random  # —Å–ª—É—á–∞–π–Ω–∞—è –º—É–¥—Ä–æ—Å—Ç—å
import requests  # –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã
import os
import threading

from telebot.types import ReplyKeyboardRemove
from config import TOKEN_BOT, host, user, password, db_name
from recoginazer import –°onvect  # –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
from Button import dice_kb, kb # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ football
from telebot import types  # types.Message
from parsers import pars_date_tour, pars_rfpl_tabl

bot = telebot.TeleBot(TOKEN_BOT, skip_pending=True)  # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ + –ø—Ä–æ–ø—É—Å–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

log = logging.getLogger()  # –ª–æ–≥–∏

# –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

Help = """
/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ 
/weather - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ
/wisdom - –¥–æ–±–∞–≤–∏—Ç—å –º—É–¥—Ä–æ—Å—Ç—å
/football - —Å—ã–≥—Ä–∞—Ç—å –≤ —Ñ—É—Ç–±–æ–ª –≤ —á–∞—Ç–µ #394
/dr - —Å—á–µ—Ç—á–∏–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π
/rfpl - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π —Ç—É—Ä –†–§–ü–õ –∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
/who - —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π –æ–ø—Ä–æ—Å
/chat - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

–†–∞—Å—à–∏—Ñ—Ä—É—é –≥–æ–ª–æ—Å–æ–≤—É—Ö—É
–ú—É–¥—Ä–æ—Å—Ç—å - –ø–æ–¥–µ–ª—é—Å—å –º—É–¥—Ä–æ—Å—Ç—å—é —Å —Ç–æ–±–æ–π
–î–∞ - –ì–∏—Ñ–∫–∞
–ù–µ—Ç - –°—Ç–∏–∫–µ—Ä

@isremember_Bot - –ë–æ—Ç - –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –∏ —Ç–∞–π–º–µ—Ä

"""





# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "–ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç—É–π —Å–µ–Ω—Å–µ—è, –Ω–∞–ø–∏—à–∏ /help")


# –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∏ —É–º–µ–Ω–∏—è–º
@bot.message_handler(commands=['help'])
def info_from_bot(message: types.Message):
    bot.reply_to(message, Help)


# –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π(–ø–µ—Ä–µ–≤–æ–¥ –≤ —Ç–µ–∫—Å—Ç)
@bot.message_handler(content_types=['voice'])
def get_audio(message: types.Message):
    file_id = message.voice.file_id  # –ü–æ–ª—É—á–∞–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è
    file_info = bot.get_file(file_id)  # –∏–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–π–ª
    downloaded_file = bot.download_file(file_info.file_path)  # —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file_name = str(message.message_id) + '.ogg'  # –∏–º—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º ogg –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ wav
    name = message.chat.first_name if message.chat.first_name else 'Unicorm_dude'  # –¥–ª—è –ª–æ–≥–æ–≤
    log.info(f'Chat {name} (ID: {message.chat.id}) download file {file_name} ')  # —Å—Ç—Ä–æ–∫–∞ –ª–æ–≥–∞

    with open(file_name, 'wb') as new_file:  # —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
        new_file.write(downloaded_file)
    convecter = –°onvect(file_name)  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
    os.remove(file_name)  # —É–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º ogg
    message_text = convecter.audio_to_text()  # –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ç–µ–∫—Å—Ç
    del convecter  # —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º wav
    bot.reply_to(message, message_text)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ "–ú—É–¥—Ä–æ—Å—Ç–∏" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª, –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ —á–∞—Ç
@bot.message_handler(commands=['wisdom'])
def add_wisdom(message: types.Message):
    bot.delete_message(message.chat.id, message.id)
    send = bot.send_message(message.from_user.id, '–î–µ–ª–∏—Å—å –º—É–¥—Ä–æ—Å—Ç—å—é —Å–≤–æ–µ–π —Å–æ –º–Ω–æ–π')
    bot.register_next_step_handler(send, new_wisdom)  # –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è


def new_wisdom(message: types.Message):
    write_wisdom = message.text.capitalize()  # –ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç —Å –ø–µ—Ä–≤–æ–π –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤–æ–π

    with open('wisdom.txt', 'r+') as f:  # –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ —Å "–ú—É–¥—Ä–æ—Å—Ç—è–º–∏" –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∏—Ö –≤ –ª–∏—Å—Ç
        new_list = [i for i in f if len(i) != 0]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–π "–ú—É–¥—Ä–æ—Å—Ç–∏" –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª, –∏–ª–∏ –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ —Ç–∞–∫–∞—è —É–∂–µ –µ—Å—Ç—å.
        if write_wisdom not in new_list:
            f.write(f'\n{write_wisdom}')
            wisdom_list.append(write_wisdom)
            bot.send_message(message.from_user.id,
                             f'–ú—É–¥—Ä–æ—Å—Ç—å —Ö–æ—Ä–æ—à–∞—è, –ø—Ä–∏–º—É –º—É–¥—Ä–æ—Å—Ç—å —Ç–≤–æ—é \n \n <em> –¢–≤–æ—è –º—É–¥—Ä–æ—Å—Ç—å:</em> {write_wisdom}',
                             parse_mode='html')
        else:
            bot.send_message(message.from_user.id,
                             f' <b>–ú—É–¥—Ä–æ—Å—Ç—å - {write_wisdom}</b> \n \n –£–∂–µ –∑–Ω–∞—é \n –ï—Å—Ç—å –µ—â–µ-—á—Ç–æ –Ω–∏–±—É–¥—å?',
                             parse_mode='html')


# –í—ã–≤–æ–¥ "–ú—É–¥—Ä–æ—Å—Ç–∏" –≤ —á–∞—Ç
@bot.message_handler(regexp=r'–ú—É–¥—Ä–æ—Å—Ç—å')
def wisdom_choice(message: types.Message):
    if message.text.count(' ') < 1:
        try:
            bot.send_message(message.chat.id, random.choice(wisdom_list))
        except:
            bot.send_message(message.chat.id, random.choice(wisdom_list))

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏(chat, username, id)
@bot.message_handler(commands=['message'])
def message_info(message: types.Message):
    bot.send_message(message.from_user.id, message)
    bot.delete_message(message.chat.id, message.id)


# –∏–≥—Ä–∞ –≤ —Ñ—É—Ç–±–æ–ª —Å –ø–æ–º–æ—â—å—é —ç–º–æ–¥–∑–∏ –≤ —á–∞—Ç–µ
@bot.message_handler(commands=['football'])
def football(message: types.Message):
    bot.delete_message(message.chat.id, message.id)  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π
    send = bot.send_message(message.from_user.id,
                            '–°–∫–æ–ª—å–∫–æ —É–¥–∞—Ä–æ–≤ –Ω–∞–¥–æ?(–≤—ã–±–µ—Ä–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ)',
                            reply_markup=dice_kb)  # –≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç
    bot.register_next_step_handler(send, dice)  # –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–µ–¥. def


def dice(message: types.Message):
    recevid_message = message.text.lower()
    if recevid_message == '–¢—Ä–∏' or recevid_message == '–î–≤–∞':
        bot.delete_message(message.chat.id, message.chat.id)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ—Ç username
        try:
            bot.send_message(chat_id=***********, text=f'–ë—å–µ—Ç @{message.from_user.username}')
        except TypeError:
            bot.send_message(chat_id=***********,
                             text=f'–ë—å–µ—Ç {message.from_user.first_name} {message.from_user.last_name}')
        # –æ—Ç–ø—Ä–∞–≤–∫–∞ —ç–º–æ–¥–∑–∏
        finally:
            if recevid_message == '—Ç—Ä–∏':
                for ball in range(3):
                    bot.send_dice(chat_id=***********,
                                  emoji="‚öΩ")
                bot.send_dice(chat_id=-***********,
                              emoji="üé≤")
            elif recevid_message == '–¥–≤–∞':
                for ball in range(2):
                    bot.send_dice(chat_id=***********,
                                  emoji="‚öΩ")
                bot.send_dice(chat_id=***********,
                              emoji="üé≤")


# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ –Ω–∞ –≤—ã–±–æ—Ä
@bot.message_handler(commands=['weather'])
def weather_reqest(message: types.Message):
    bot.delete_message(message.chat.id, message.id)
    send = bot.send_message(message.from_user.id, f' –ü–æ–≥–æ–¥—É –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ö–æ—á–µ—à—å —É–∑–Ωa—Ç—å? \n\n'
                                                  f' –ï—Å–ª–∏ –Ω–µ—Ç –Ω—É–∂–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞, –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç–µ', reply_markup=kb)
    bot.register_next_step_handler(send, weather_info)


def weather_info(message: types.Message):
    if message.text == '–ú–æ—Å–∫–≤–∞':
        city = '–ú–æ—Å–∫–≤–∞'
    elif message.text == 'C–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥':
        city = 'C–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'
    elif message.text == '–¢–±–∏–ª–∏—Å–∏':
        city = '–¢–±–∏–ª–∏—Å–∏'
    elif message.text == '–ë–∞—Ç—É–º–∏':
        city = '–ë–∞—Ç—É–º–∏'
    elif message.text == '–¢–∞—à–∫–µ–Ω—Ç':
        city = '–¢–∞—à–∫–µ–Ω—Ç'
    elif message.text == '–ï—Ä–µ–≤–∞–Ω':
        city = '–ï—Ä–µ–≤–∞–Ω'
    else:
        city = message.text.capitalize()

    url = f'https://wttr.in/{city}'  # —Å–∞–π—Ç —Å –ø–æ–≥–æ–¥–æ–π –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

    weater_parameters = {
        'O': '',
        'T': '',
        'M': '',
        'format': 2
    }  # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

    request_headers = {'Accept-Language': 'ru'}  # –Ø–∑—ã–∫ –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ

    response = requests.get(url, headers=request_headers,
                                params=weater_parameters)  # –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏

    ikb = types.InlineKeyboardMarkup(row_width=1)
    ikb1 = types.InlineKeyboardButton(text='–°–∞–π—Ç', url=f'https://wttr.in/{city}')
    ikb.add(ikb1)

    bot.send_message(message.from_user.id, f'–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city} - {response.text}', reply_markup=ReplyKeyboardRemove())
    bot.send_message(message.from_user.id, '<b>–ú–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</b>', parse_mode='html',
                                                                                                    reply_markup=ikb)
    bot.delete_message(message.chat.id, message.id)


# –û—Å—Ç–∞—Ç–æ–∫ –¥–Ω–µ–π –¥–æ –æ—Ç–ø—É—Å–∫–∞ 
@bot.message_handler(commands=['date', 'work'])
def date(message: types.Message):
    day_x = dt.date(2023, 3, 27)  # c—Ç–∞—Ç–∏—á–Ω–∞—è –¥–∞—Ç–∞ –¥–æ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å –¥–Ω–∏
    holiday = [dt.date(2023, 2, 23), dt.date(2023, 2, 24), dt.date(2023, 2, 25), dt.date(2023, 3, 8)]
    day = dt.date.today()  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
    # –í—ã–≤–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã
    if message.text == '/date':
        go_away = day_x - day
        bot.send_message(message.chat.id,
                         f'<b>–∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω–µ–π</b> <em>–¥–æ –æ—Ç–ø—É—Å–∫–∞ –æ—Å—Ç–∞–ª–æ—Å—å:</em> \n<b>{go_away.days}</b>',
                         parse_mode='html')
    else:
        go_away = np.busday_count(day, day_x, holidays=holiday)  # timedelta –¥–ª—è —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
        bot.send_message(message.chat.id, f' –î–Ω–µ–π –µ—â–µ —Ä–∞–±–æ—Ç–∞—Ç—å  -  <b>{go_away}</b>',
                         parse_mode='html')


# –û—Ç—Å—á–µ—Ç –¥–Ω–µ–π –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
@bot.message_handler(commands=['dr'])
def happy_birthday(message: types.Message):
    bot.delete_message(message.chat.id, message.id)

    DATABASE = {
        "***********,": '2022-01-07',
        "***********,": '2022-02-13',
        "***********,": '2022-02-20',
        "***********,": '2022-04-24',
        "***********,": '2022-05-30',
        "***********,": '2022-09-01',
        "***********,": '2022-10-22',
        "***********,": '2022-12-03'
    }

    msg = '<u><b>–î–Ω–µ–π –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å:\n\n</b></u>'
    dr = list()
    for name in DATABASE:  # –ü–µ—Ä–µ–±–æ—Ä –∫–ª—é—á–µ–π —Å–ª–æ–≤–∞—Ä—è

        day_x = dt.datetime.strptime(DATABASE[name], '%Y-%m-%d').date()  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∞—Ç—É
        day = dt.date.today()  # –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å
        year_now = day.year  # –¢–µ–∫—É—â–∏–π –≥–æ–¥ - –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –≤–∏—Å–æ–∫–æ—Å–Ω—ã–π –≥–æ–¥ –∏–ª–∏ –Ω–µ—Ç
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ -  –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —ç—Ç–æ–º –≥–æ–¥—É –∏–ª–∏ –Ω–µ—Ç
        if day < day_x:
            tdelta = day_x - day



        while day > day_x:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –≤ –≥–æ–¥—É
            if calendar.isleap(year_now) == False:  # –Ω–µ–≤–∏—Å–æ–∫–æ—Å–Ω—ã–π –≥–æ–¥
                day_x = day_x + dt.timedelta(days=365)

            else:  # –í–∏—Å–æ–∫–æ—Å–Ω—ã–π –≥–æ–¥
                day_x = day_x + dt.timedelta(days=366)

            tdelta = day_x - day

        if day == day_x:  # –ï—Å–ª–∏ –¥–∞—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
            bot.send_message(message.from_user.id, 'C–µ–≥–æ–¥–Ω—è!')

        dr.append((name, day_x, tdelta.days))

    for i in range(len(dr)):
        if dr[i][2] < dr[i-1][2]:
            dr[i-1], dr[i] = dr[i], dr[i-1]

    for elements in dr:

        space_one = ' ' * (7-len(elements[0]))


        msg +='<em>{}</em> {} <b>{}</b>'.format(elements[0], space_one,
        elements[1].strftime('%d.%m.%Y')) + '  ' +  '--' +'  ' + str(elements[2])+'\n'

    bot.send_message(message.from_user.id, '<code>{}</code>'.format(msg), parse_mode='html')


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ —á–∞—Ç–∞

# –ü–∏—Å–∞—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞ –∫–∞–ø—Å–ª–æ–∫–æ–º
@bot.message_handler(commands=['rc'])
def red_caps(message: types.Message):
    mess = list(message.text.split())
    mess.pop(0)
    mess = ' '.join(mess)
    mess = mess.upper()
    bot.send_message(chat_id=***********, text=f'<b>{mess}</b> ',
                     parse_mode='html')
    bot.delete_message(message.chat.id, message.id)


# –ü–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
@bot.message_handler(commands=['r'])
def red_caps(message: types.Message):
    mess = list(message.text.split())
    mess.pop(0)
    mess = ' '.join(mess)
    mess = mess.capitalize()
    bot.send_message(chat_id=***********, text=mess)
    bot.delete_message(message.chat.id, message.id)


# –ü–∏—Å–∞—Ç—å –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ —á–∞—Ç
@bot.message_handler(commands=['chat'],
                     content_types=['text', 'photo', 'stiker', 'video', 'emoji', 'voice', 'video_note'])
def rat_voce(message: types.Message):
    bot.delete_message(message.chat.id, message.id)
    send = bot.send_message(message.from_user.id, '–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ(–∏–ª–∏ –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å)')
    bot.send_message(message.from_user.id, "–Ø —É–º–µ—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å:\n"
                                           "- –¢–µ–∫—Å—Ç\n "
                                           "- –§–æ—Ç–æ\n "
                                           "- –í–∏–¥–µ–æ\n "
                                           "- –°—Ç–∏–∫–µ—Ä—ã\n "
                                           "- –°–º–∞–π–ª–∏–∫–∏\n "
                                           "- –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n "
                                           "- –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è")
    bot.register_next_step_handler(send, bot_voice)


def bot_voice(message: types.Message):
     bot.copy_message(chat_id=***********, from_chat_id=message.from_user.id, message_id=message.id)

@bot.message_handler(commands=['who'])
def pool(message):
    names = ['***********', '***********', '***********', '***********', '***********', '***********', '***********', '***********']
    bot.send_poll(chat_id=***********,
                  question='–ö—Ç–æ –ø–∏–¥–æ—Ä?',
                  options=names,
                  is_anonymous=True)

    bot.send_message(chat_id=***********, text='–í—Å–µ, –∫–æ–Ω–µ—á–Ω–æ, –∑–Ω–∞—é—Ç <b>–ü–†–ê–í–ò–õ–¨–ù–´–ô</b> –æ—Ç–≤–µ—Ç', parse_mode='html')
    bot.delete_message(message.chat.id, message.id)


@bot.message_handler(regexp='–ø–∏–¥–æ—Ä–∞')
@bot.message_handler(regexp='–ø–∏–¥–æ—Ä')
def pidor(message):
    bot.send_audio(message.chat.id, 'AwACAgIAAxkBAAISyGOgQEcYEbzEJRtOBGfBnvviCUCoAALgIwACbw4BSdWIYzC_qQVtLAQ')


# —Ä–µ–∞–∫—Ü–∏—è –±–æ—Ç–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
@bot.message_handler(regexp=r'–î–∞')
@bot.message_handler(regexp=r'da')
@bot.message_handler(regexp=r'–¥a')
@bot.message_handler(regexp=r'–¥ a')
@bot.message_handler(regexp=r'–î–∞')
@bot.message_handler(regexp=r'd a')
@bot.message_handler(regexp=r'–ù–µ—Ç')
@bot.message_handler(regexp=r'–ùe—Ç')
@bot.message_handler(regexp=r'–ü–æ—á–µ–º—É')
@bot.message_handler(regexp='–∫–∞–∫')
@bot.message_handler(regexp=r'no')
@bot.message_handler(regexp=r'n–æ')
@bot.message_handler(regexp=r'n o')
@bot.message_handler(regexp=r'n –æ')
@bot.message_handler(regexp=r'yes')
@bot.message_handler(regexp=r'y–µs')
@bot.message_handler(regxp=r'y e s')
@bot.message_handler(regexp=r'y –µ s')
@bot.message_handler(regexp=r'–î@')
@bot.message_handler(regexp=r'd@')
@bot.message_handler(regexp=r'–¥ –∞')
@bot.message_handler(regexp=r'–Ω e —Ç')
@bot.message_handler(regexp=r'd @')
@bot.message_handler(regexp=r'–î @')
@bot.message_handler(regexp=r'–Ω –µ —Ç')
def get_answer(message: types.Message):
    yes = 'CgACAgIAAxkBAAIEoWN02hOt6_BDH_M59N5AQyF4dL4RAAJ4DgACg2WxSWvB91qjxq6CKwQ'
    no = 'CAACAgIAAxkBAAEGkS9jgnvwXqZRV39_t8DpiecLMzQj2QACxwEAAnngUC8VnEmMhisfUCsE'
    why = 'BAACAgIAAxkBAAIKyGOAk2E7csc4AAFE91uvNI4FI3qI0QACjiMAAo8JAAFIPXGse2Y3wAorBA'
    answer = message.text.lower()
    match = re.search(pattern=r'([~@!#$%^&*()-_=+,."‚Ññ;%:?*/bcf-z ]\s*)+', string=answer)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ

    if match == False:
        answer = answer
    else:
        answer = re.sub('[~!@#$%^&*()-_=+,."‚Ññ;:?/]+', '', answer)  # —É–¥–∞–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
    da = ['da', '–¥a', '–¥ –∞', 'd a', '–¥–∞', 'd a', 'd –∞', '–¥ a', 'd', '–¥', 'd @', '–¥ @', '–¥ ', 'd ']
    net = ['–Ω–µ—Ç', '–Ω –µ —Ç ', '–Ω e —Ç', '–Ωe—Ç', '–Ω –µ —Ç', '–Ω   —Ç']
    if answer in da:
        bot.send_animation(message.chat.id, yes)
    elif answer in net:
        bot.send_sticker(message.chat.id, no)
    elif answer == "–ø–æ—á–µ–º—É":
        bot.send_video(message.chat.id, why)
    elif answer == '–∫–∞–∫' and len(answer) < 4:
        bot.send_message(message.chat.id, '–ß–µ—Ä–µ–∑ –ö–£–¢–ê–ö')
    elif answer == 'no' or answer == 'n–æ' or answer == 'n o ' or answer == 'n –æ':
        bot.send_message(message.chat.id, '<em> –•—É–µ–º –ø–æ –ª–±—É –¥–∞–Ω–æ</em>',
                         parse_mode='html')
    elif answer == 'yes' or answer == 'y–µs' or answer == 'y e s' or answer == 'y –µ s':
        bot.send_message(message.chat.id,
                         f'{message.from_user.first_name} {message.from_user.last_name}<b> –í –∑–∞–ª—É–ø—É –∑–∞–ª–µ–∑</b>',
                         parse_mode='html')


@bot.message_handler(commands=['rfpl'])
def rfpl_tour(message):

    bot.delete_message(message.chat.id, message.id)

    tour = pars_date_tour()
    tabl = pars_rfpl_tabl()
    tornament_tabl = '<b>–¢–£–†–ù–ò–†–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê</b> \n\n'
    one_tour = '–†–ê–°–ü–ò–°–ê–ù–ò–ï –ú–ê–¢–ß–ï–ô –¢–£–†–ê \n\n'

    ikb_tabl = types.InlineKeyboardButton(text='–¢–∞–±–ª–∏—Ü–∞', url='https://premierliga.ru/tournament-table/')
    ikb_matchday = types.InlineKeyboardButton(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–∞', url='https://premierliga.ru/calendar/')

    ikb_rfpl = types.InlineKeyboardMarkup(row_width=2)
    ikb_rfpl.add(ikb_tabl, ikb_matchday)


    for i in tabl[1:]:
        if i[1] == '–ó–µ–Ω–∏—Ç':
            i[1] = '–ë–æ–º–∂–∏'
        elif i[1] == '–ü–§–ö –¶–°–ö–ê':
            i[1] = '–ö–æ–º–∞–Ω–¥–∞ –≥–æ–Ω–¥–æ–Ω–æ–≤'
        elif i[1] == '–õ–æ–∫–æ–º–æ—Ç–∏–≤':
            i[1] = '–®–ª—é—Ö–æ–º–æ—Ç—ã'
        elif i[1] == '–î–∏–Ω–∞–º–æ':
            i[1] = '–ú—É—Å–æ—Ä–∏—à–∫–∏'

        space = 25 - len(i[1])
        tornament_tabl += i[1] + ' ' * space + ' ' + i[7] + '\n'

    bot.send_message(message.from_user.id, '<code>{}</code>'.format(tornament_tabl), parse_mode='html')


    for i in range(len(tour)):
        one_tour += '<b>{}</b>'.format(tour[i][0]) + '\n' + '<u>{}</u>'.format(tour[i][1]) + '\n'

    bot.send_message(message.from_user.id, one_tour, parse_mode='html', reply_markup=ikb_rfpl)





@bot.message_handler()
def info_message_for_edit(message):
    chat = message.chat.id
    id_msg = message.id
    nick = message.from_user.username
    sending = message.text

    print(f'CHAT: {chat}, ID MESSAGE: {id_msg} USERNAME: {nick}, TEXT: {sending}')



#
# @bot.message_handler(content_types = ['photo'])
# def photo_id(message: types.Message):
# 	bot.send_message(message.from_user.id, message.photo.file_id)


#
# @bot.message_handler(content_types = ['animation'])
# def animation_id(message: types.Message):
# 	bot.send_message(message.from_user.id, message.animation.file_id)
#
# @bot.message_handler(content_types = ['stiker'])
# def animation_id(message: types.Message):
# 	bot.send_message(message.from_user.id, message.stiker.file_id)
#
# @bot.message_handler(content_types = ['video'])
# def video_id(message: types.Message):
# 	bot.send_message(message.from_user.id, message.video.file_id)

# @bot.message_handler(content_types = ['voice'])
# def video_id(message: types.Message):
# 	bot.send_message(message.from_user.id, message)

def simple_wisdom():
    hour = dt.datetime.now().hour
    if hour > 8 and hour < 10:
        bot.send_message(chat_id=***********,
                         text='<b>–ú—É–¥—Ä–æ—Å—Ç—å—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å, –¥–µ–ª—é—Å—å —Å –í–∞–º–∏ —è!</b>\n\n' + f'<i>{random.choice(wisdom_list)}</i>',
                         parse_mode='html')
        threading.Timer(60*60*24, simple_wisdom).start()

def weather_today():
    hour = dt.datetime.now().hour
    if  hour > 6 and hour < 8:
        today = '<b>–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n'
        cities = ['–ú–æ—Å–∫–≤–∞', '–¢–±–∏–ª–∏—Å–∏']
        for city in cities:
            url = f'https://wttr.in/{city}'  

            weater_parameters = {
                'O': '',
                'T': '',
                'M': '',
                'format': 2
            }  

            request_headers = {'Accept-Language': 'ru'}  

            response = requests.get(url, headers=request_headers,
                                        params=weater_parameters)
            today += '{}  \n{}'.format(city, response.text) + '\n'
        bot.send_message(chat_id=***********, text=today, parse_mode='html')
        threading.Timer(60 * 60 * 24, weather_today).start()


if __name__ == '__main__':
    with open('wisdom.txt', 'r') as f:
        wisdom_list = [i for i in f if len(i) != 0]

    print(wisdom_list)
    log.info('—Ä–∞–±–æ—Ç–∞—é')
    while True:
        simple_wisdom()
        weather_today()
        bot.infinity_polling(skip_pending=True)